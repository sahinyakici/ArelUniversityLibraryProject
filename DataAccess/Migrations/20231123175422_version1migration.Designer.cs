// <auto-generated />
using System;
using DataAccess.Concrete.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(PostgreContext))]
    [Migration("20231123175422_version1migration")]
    partial class version1migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Concrete.OperationClaim", b =>
                {
                    b.Property<Guid>("OperationClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OperationClaimId");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            OperationClaimId = new Guid("471e1977-9cd4-4dcc-acc7-75f2540b35e9"),
                            Name = "admin"
                        },
                        new
                        {
                            OperationClaimId = new Guid("849e633a-c4af-4068-a5b6-b2006c4a45c9"),
                            Name = "user"
                        },
                        new
                        {
                            OperationClaimId = new Guid("e1881245-88a8-428e-8eaf-5d6a06e8e68f"),
                            Name = "editor"
                        },
                        new
                        {
                            OperationClaimId = new Guid("45f1369e-ebd5-4921-8527-d965e60626e6"),
                            Name = "books.add"
                        },
                        new
                        {
                            OperationClaimId = new Guid("28db5a5c-041b-4769-8996-b6ffa2fd889a"),
                            Name = "books.edit"
                        },
                        new
                        {
                            OperationClaimId = new Guid("a6709e32-1ff1-4afa-a1cd-a93c849d5d78"),
                            Name = "books.delete"
                        },
                        new
                        {
                            OperationClaimId = new Guid("4e219b13-dd02-4c4e-b8fc-357d626392ac"),
                            Name = "books.update"
                        },
                        new
                        {
                            OperationClaimId = new Guid("f473106b-ba6e-474e-87ab-387f59bee5a5"),
                            Name = "authors.add"
                        },
                        new
                        {
                            OperationClaimId = new Guid("c10a5389-e286-42e4-bba7-615282cb7b3a"),
                            Name = "authors.edit"
                        },
                        new
                        {
                            OperationClaimId = new Guid("8a52997d-0c7f-4580-b906-cc8f5836ca09"),
                            Name = "authors.delete"
                        },
                        new
                        {
                            OperationClaimId = new Guid("776d8987-894a-4125-afb7-df3566da113a"),
                            Name = "authors.update"
                        },
                        new
                        {
                            OperationClaimId = new Guid("3f2d21ab-6d7b-42fa-90da-feb63cf678b0"),
                            Name = "genres.add"
                        },
                        new
                        {
                            OperationClaimId = new Guid("8eac9a4c-5bda-4f9b-8076-3052a9ad8de1"),
                            Name = "genres.edit"
                        },
                        new
                        {
                            OperationClaimId = new Guid("e912c841-0868-40e5-a347-7d2b46fe1388"),
                            Name = "genres.delete"
                        },
                        new
                        {
                            OperationClaimId = new Guid("adc96964-2d27-4fa6-8ae2-61e5b79733da"),
                            Name = "genres.update"
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Entities.Concrete.UserOperationClaim", b =>
                {
                    b.Property<Guid>("UserOperationClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OperationClaimId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("UserOperationClaimId");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("Entities.Concrete.Author", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Entities.Concrete.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("PageSize")
                        .HasColumnType("integer");

                    b.Property<bool>("RentStatus")
                        .HasColumnType("boolean");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Entities.Concrete.Genre", b =>
                {
                    b.Property<Guid>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Entities.Concrete.Rental", b =>
                {
                    b.Property<Guid>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<float?>("RentalPrice")
                        .HasColumnType("real");

                    b.Property<DateTime>("RentalStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RentalStop")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RentalId");

                    b.ToTable("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
